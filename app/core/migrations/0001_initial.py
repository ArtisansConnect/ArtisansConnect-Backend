# Generated by Django 5.2 on 2025-04-19 23:56

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ElectricalService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rooms", models.IntegerField()),
                ("surface", models.FloatField()),
                ("smallSpotlight", models.IntegerField(default=0)),
                ("bigSpotlight", models.IntegerField(default=0)),
                (
                    "spotlightQuality",
                    models.CharField(
                        choices=[
                            ("POOR", "Poor"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                        ],
                        default="NORMAL",
                        max_length=100,
                    ),
                ),
                ("chandelier", models.IntegerField(default=0)),
                (
                    "chandelierQuality",
                    models.CharField(
                        choices=[
                            ("POOR", "Poor"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                        ],
                        default="NORMAL",
                        max_length=100,
                    ),
                ),
                ("simpleSocket", models.IntegerField(default=0)),
                ("groundSocket", models.IntegerField(default=0)),
                (
                    "socketQuality",
                    models.CharField(
                        choices=[
                            ("POOR", "Poor"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                        ],
                        default="NORMAL",
                        max_length=100,
                    ),
                ),
                ("elecPanel", models.IntegerField(default=0)),
                (
                    "elecPanelQuality",
                    models.CharField(
                        choices=[
                            ("BIG", "Big"),
                            ("MEDUIM", "Meduim"),
                            ("SMALL", "Small"),
                        ],
                        default="NORMAL",
                        max_length=100,
                    ),
                ),
                ("simpleSwitch", models.IntegerField(default=0)),
                ("buttonpsSwitch", models.IntegerField(default=0)),
                ("doubleSwitch", models.IntegerField(default=0)),
                (
                    "switchQuality",
                    models.CharField(
                        choices=[
                            ("POOR", "Poor"),
                            ("NORMAL", "Normal"),
                            ("HIGH", "High"),
                        ],
                        default="NORMAL",
                        max_length=100,
                    ),
                ),
                ("cableLength", models.FloatField(editable=False, null=True)),
                ("marqueur", models.BooleanField(default=False)),
                ("cost", models.FloatField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("firstName", models.CharField(max_length=100)),
                ("lastName", models.CharField(max_length=100)),
                ("phoneNumber", models.IntegerField()),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
